The whole point of a shoot-em-up is of course shooting things. For this you need bullets. Lots of them. Creating new objects in JavaScript (or indeed any language) is expensive. So what we do is pre-build all our bullets up front. Then as they are fired。putting them back into the pool。ready to be reset and fired again as needed. This way we don't generate any new objects at all during the game loop.。To manage this I'm using a single Bullet object. This is essentially a Sprite with a couple of extra features。var Bullet = function (game。Phaser.Sprite.call(this。game。key)。this.texture.baseTexture.scaleMode = PIXI.scaleModes.NEAREST。this.outOfBoundsKill = true。this.exists = false。this.tracking = false。this.scaleSpeed = 0。The first line tells Pixi to use nearest neighbour scaling. This means when the bullet is scaled from its default size it won't be automatically 'smoothed' as will retain its pixel crispness.。The checkWorldBounds and outOfBoundsKill lines pretty much do exactly what they say. They will check if the bullet is within the world bounds and if not kill it。freeing it up for use in the bullet pool again.。The tracking property tells the Bullet to rotate to face the direction it is moving in。as it moves. This is handled in its update method. Finally scaleSpeed is how fast the bullet should grow in size as it travels. Both of these settings are used by some of the weapons as you'll see shortly.。The example has 10 different weapon types and 2 'combo' weapons - which are essentially combinations of the previous 10 types. However all weapons follow the exact same template. Here is the SingleBullet weapon。Weapon.SingleBullet = function (game) {。Phaser.Group.call(this。game.world。false。Phaser.Physics.ARCADE)。this.nextFire = 0。this.fireRate = 100。for (var i = 0。this.add(new Bullet(game。'bullet5')。true)。return this。As you can see it's a Group that has Arcade Physics enabled on it. There are 3 properties。nextFire is the time the player is allowed to shoot again. bulletSpeed is the speed the bullets this particular weapon fires travel at. And fireRate is the rate at which this weapon fires. The lower the number。the higher the firing rate.。It then creates a bunch of Bullet objects. In this weapon you can see it's creating 64 of them and they're all using 'bullet5' as the texture. If you look in the assets folder you'll see 11 different bullet textures you can use.。Finally the Weapon class has a fire method。Weapon.SingleBullet.prototype.fire = function (source) {。if (this.game.time.time < this.nextFire) { return。var x = source.x + 10。var y = source.y + 10。this.getFirstExists(false).fire(x。y。this.bulletSpeed。this.nextFire = this.game.time.time + this.fireRate。The first thing it does is check if the player can fire or not。by comparing the game time with the nextFire property.。Then it gets the first bullet from the Group that has exists = false and fires it. The parameters to the fire method are。Bullet.fire(x。angle。speed。gy)。and that's exactly what the first weapon type does.。Single Bullet。weapon1。